var _typeof2 = require("../@babel/runtime/helpers/typeof");

var e, t, n = "[UMENG] -- ", a = (e = null, t = !1, function() {
    null === e && (e = new i());
    return e;
});

function i() {
    this.setDebug = function(e) {
        t = e;
    };
    this.d = function() {
        if (t) try {
            "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]);
            console.debug.apply(console, arguments);
        } catch (e) {}
    };
    this.i = function() {
        try {
            if (t) try {
                "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]);
                console.info.apply(console, arguments);
            } catch (e) {}
        } catch (e) {}
    };
    this.e = function() {
        if (t) try {
            "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]);
            console.error.apply(console, arguments);
        } catch (e) {}
    };
    this.w = function() {
        if (t) try {
            "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]);
            console.warn.apply(console, arguments);
        } catch (e) {}
    };
    this.v = function() {
        if (t) try {
            "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]);
            console.log.apply(console, arguments);
        } catch (e) {}
    };
    this.t = function() {
        if (t) try {
            console.table.apply(console, arguments);
        } catch (e) {}
    };
    this.tip = function() {
        try {
            "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]);
            console.log.apply(console, arguments);
        } catch (e) {}
    };
    this.tip_w = function(e) {
        try {
            console.log("%c " + n + e, "background:red; padding: 4px; padding-right: 8px; border-radius: 4px; color: #fff;");
        } catch (e) {}
    };
    this.err = function() {
        try {
            "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]);
            console.error.apply(console, arguments);
        } catch (e) {}
    };
}

var _r = function r(e, t) {
    return (_r = Object.setPrototypeOf || {
        __proto__: []
    } instanceof Array && function(e, t) {
        e.__proto__ = t;
    } || function(e, t) {
        for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
        }
    })(e, t);
};

function o(e, t) {
    _r(e, t);
    function n() {
        this.constructor = e;
    }
    e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());
}

var u = new (function(e) {
    o(t, e);
    function t() {
        return null !== e && e.apply(this, arguments) || this;
    }
    t.prototype.getSdkType = function() {
        return "wxgamemp";
    };
    t.prototype.getPlatform = function() {
        return "wx";
    };
    return t;
}(function() {
    function e() {}
    e.prototype.setStorage = function(e, t, n) {
        wx.setStorage({
            key: e,
            data: t,
            success: function success() {
                "function" == typeof n && n(!0);
            },
            fail: function fail() {
                "function" == typeof n && n(!1);
            }
        });
    };
    e.prototype.getStorage = function(t, n) {
        wx.getStorage({
            key: t,
            success: function success(e) {
                "function" == typeof n && n(e.data);
            },
            fail: function fail(e) {
                a().w(t + ": " + e.errMsg);
                "function" == typeof n && n();
            }
        });
    };
    e.prototype.removeStorage = function(e, t) {
        wx.removeStorage({
            key: e,
            success: function success() {
                "function" == typeof t && t(!0);
            },
            fail: function fail() {
                "function" == typeof t && t(!1);
            }
        });
    };
    e.prototype.getSystemInfo = function(i) {
        wx.getSystemInfo({
            success: function success(e) {
                var t = {
                    model: e.model,
                    brand: e.brand,
                    pixelRatio: e.pixelRatio,
                    screenWidth: e.screenWidth,
                    screenHeight: e.screenHeight,
                    fontSizeSetting: e.fontSizeSetting,
                    platform: e.platform,
                    platformVersion: e.version,
                    platformSDKVersion: e.SDKVersion,
                    language: e.language,
                    deviceName: e.model,
                    OSVersion: e.system,
                    resolution: ""
                }, n = e.system.split(" ");
                Array.isArray(n) && (t.OS = n[0]);
                n = Math.round(e.screenWidth * e.pixelRatio), e = Math.round(e.screenHeight * e.pixelRatio);
                t.resolution = e < n ? n + "*" + e : e + "*" + n;
                "function" == typeof i && i(t);
            },
            fail: function fail() {
                "function" == typeof i && i();
            }
        });
    };
    e.prototype.getDeviceInfo = function(e) {
        "function" == typeof e && e("");
    };
    e.prototype.checkNetworkAvailable = function(t) {
        wx.getNetworkType({
            success: function success(e) {
                "function" == typeof t && t(e && "none" !== e.networkType);
            },
            fail: function fail() {
                "function" == typeof t && t(!1);
            }
        });
    };
    e.prototype.getNetworkInfo = function(t) {
        wx.getNetworkType({
            success: function success(e) {
                "function" == typeof t && t({
                    networkAvailable: "none" !== e.networkType,
                    networkType: e.networkType
                });
            },
            fail: function fail() {
                "function" == typeof t && t();
            }
        });
    };
    e.prototype.getDeviceId = function(e) {
        e("");
    };
    e.prototype.getAdvertisingId = function(e) {
        "function" == typeof e && e("");
    };
    e.prototype.onNetworkStatusChange = function(t) {
        wx.onNetworkStatusChange(function(e) {
            "function" == typeof t && t(e.isConnected);
        });
    };
    e.prototype.request = function(e) {
        var t = e.success, n = e.fail, i = !1, r = null;
        e.success = function(e) {
            if (!i) {
                r && clearTimeout(r);
                "function" == typeof t && t(e);
            }
        };
        e.fail = function() {
            if (!i) {
                r && clearTimeout(r);
                "function" == typeof n && n(!1);
            }
        };
        wx.request(e);
        r = setTimeout(function() {
            r && clearTimeout(r);
            i = !0;
            "function" == typeof n && n(i);
        }, e.timeout || 5e3);
    };
    e.prototype.getSdkType = function() {
        return "wxmp";
    };
    e.prototype.getPlatform = function() {
        return "wx";
    };
    e.prototype.connectSocket = function(e) {
        wx.connectSocket(e);
    };
    e.prototype.closeSocket = function(e) {
        wx.closeSocket(e);
    };
    e.prototype.sendSocketMessage = function(e) {
        wx.sendSocketMessage(e);
    };
    e.prototype.onSocketOpen = function(e) {
        wx.onSocketOpen(e);
    };
    e.prototype.onSocketClose = function(e) {
        wx.onSocketClose(e);
    };
    e.prototype.onSocketMessage = function(e) {
        wx.onSocketMessage(e);
    };
    e.prototype.onSocketError = function(e) {
        wx.onSocketError(e);
    };
    e.prototype.getClipboard = function(t) {
        try {
            wx.getClipboardData({
                success: function success(e) {
                    "function" == typeof t && t(e.data);
                },
                fail: function fail() {
                    "function" == typeof t && t("");
                }
            });
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            a.e("读取clipboard发生错误", e);
        }
    };
    e.prototype.showModal = function(e) {
        try {
            wx.showModal(e);
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            a.e("展示Modal时发生错误", e);
        }
    };
    e.prototype.showToast = function(e) {
        try {
            wx.showToast(e);
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            a.e("showToast error", e);
        }
    };
    e.prototype.getUserInfo = function(t) {
        var n = {
            fail: function fail() {
                t && t();
            },
            success: function success(e) {
                if (e && e.userInfo) {
                    e = e.userInfo;
                    t && t({
                        avatar: e.avatarUrl,
                        nickName: e.nickName,
                        gender: e.gender,
                        country: e.country,
                        province: e.province,
                        city: e.city,
                        language: e.language
                    });
                }
            }
        };
        try {
            wx.getSetting({
                success: function success(e) {
                    e.authSetting["scope.userInfo"] && wx.getUserInfo(n);
                },
                fail: function fail() {
                    t();
                }
            });
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            a.e("getUserInfo error", e);
        }
    };
    e.prototype.getAppInfoSync = function() {
        if (wx.getAccountInfoSync) {
            var e = wx.getAccountInfoSync(), e = e && e.miniProgram ? e.miniProgram : {};
            return {
                appId: e.appId,
                appEnv: e.envVersion,
                appVersion: e.version
            };
        }
        return {};
    };
    e.prototype.onShareAppMessage = function(e) {
        wx.onShareAppMessage(e);
    };
    e.prototype.shareAppMessage = function(e) {
        wx.shareAppMessage(e);
    };
    return e;
}()))(), s = {
    SESSION_INTERVAL: 3e4,
    LOG_URL: "https://umini.shujupie.com/wxm_logs",
    GET_OPENID_URL: "https://umini.shujupie.com/uminiprogram_logs/wx/getuut",
    USERINFO_URL: "https://umini.shujupie.com/uminiprogram_logs/comm/uif",
    DEVICE_INFO_KEY: "device_info",
    ADVERTISING_ID: "mobile_ad_id",
    ANDROID_ID: "android_id",
    CURRENT_SESSION: "current_session",
    SESSION_PAUSE_TIME: "session_pause_time",
    EVENT_SEND_DEFAULT_INTERVAL: 15e3,
    EVENT_LAST_SEND_TIME: "last_send_time",
    MAX_EVENTID_LENGTH: 128,
    MAX_PROPERTY_KEY_LENGTH: 256,
    MAX_PROPERTY_KEYS_COUNT: 100,
    REPORT_POLICY: "report_policy",
    REPORT_INTERVAL_TIME: "report_interval_time",
    REPORT_POLICY_START_SEND: "1",
    REPORT_POLICY_INTERVAL: "6",
    IMPRINT: "imprint",
    SEED_VERSION: "1.0.0",
    IMPL_VERSION: "2.4.11",
    ALIPAY_AVAILABLE_VERSION: "10.1.52",
    SHARE_PATH: "um_share_path",
    SHARES: "shares",
    REQUESTS: "requests",
    UUID: "um_uuid",
    UUID_SUFFIX: "ud",
    OPENID: "um_od",
    UNIONID: "um_unid",
    ALIPAYID: "um_alipayid",
    USERID: "um_userid",
    PROVIDER: "um_provider",
    SWANID: "um_swanid",
    ANONYMOUSID: "um_anonymousid",
    LAUNCH_OPTIONS: "LAUNCH_OPTIONS",
    UM_SSRC: "_um_ssrc",
    USER_INFO: "user_info",
    IS_ALIYUN: !1,
    ALIYUN_URL: "serverless.huoban.youmeng.network.forward"
};

var c, f, p = {
    isNumber: function isNumber(e) {
        return !Number.isNaN(parseInt(e, 10));
    },
    compareVersion: function compareVersion(e, t) {
        for (var n = String(e).split("."), i = String(t).split("."), r = 0; r < Math.max(n.length, i.length); r++) {
            var o = parseInt(n[r] || 0, 10), s = parseInt(i[r] || 0, 10);
            if (s < o) return 1;
            if (o < s) return -1;
        }
        return 0;
    },
    getRandomStr: function getRandomStr(e) {
        for (var t = "", n = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ], i = 0; i < Number(e); i++) {
            t += n[Math.round(Math.random() * (n.length - 1))];
        }
        return t;
    },
    clone: function clone(e) {
        return JSON.parse(JSON.stringify(e));
    },
    startsWith: function startsWith(e, t) {
        return !(!e || !t || 0 === t.length || t.length > e.length) && e.substr(0, t.length) === t;
    },
    endsWith: function endsWith(e, t) {
        return !(!t || 0 === e.length || t.length > e.length) && e.substring(e.length - t.length) === t;
    },
    assign: function assign(e) {
        if (null == e) throw new TypeError("Cannot convert undefined or null to object");
        for (var t = Object(e), n = 1; n < arguments.length; n++) {
            var i = arguments[n];
            if (i) for (var r in i) {
                Object.prototype.hasOwnProperty.call(i, r) && (t[r] = i[r]);
            }
        }
        return t;
    },
    deepEqual: function e(t, n) {
        if (t === n) return !0;
        if (t && "object" == _typeof2(t) && n && "object" == _typeof2(n)) {
            if (Object.keys(t).length !== Object.keys(n).length) return !1;
            for (var i in t) {
                if (Object.prototype.hasOwnProperty.call(n, i)) return !1;
                if (!e(t[i], n[i])) return !1;
            }
            return !0;
        }
        return !1;
    },
    trimStart: function trimStart(e, t) {
        if (!e) return "";
        if ("string" == typeof t && t.length) {
            t = new RegExp("^" + t + "*");
            e = e.replace(t, "");
        } else e = e.replace(/^s*/, "");
        return e;
    },
    trimEnd: function trimEnd(e, t) {
        if (!e) return "";
        var n, i;
        if ("string" == typeof t && t.length) {
            n = new RegExp(t);
            i = e.length;
            for (;n.test(e.charAt(i)); ) {
                --i;
            }
            return e.slice(0, i + 1);
        }
        n = /s/;
        i = e.length - 1;
        for (;n.test(e.charAt(i)); ) {
            --i;
        }
        return e.slice(0, i + 1);
    }
}, l = function(e) {
    o(t, e);
    function t() {
        return null !== e && e.apply(this, arguments) || this;
    }
    t.prototype.getOpenIdAsync = function(t, n) {
        var i = this;
        wx.login({
            success: function success(e) {
                e.code ? u.request({
                    url: s.GET_OPENID_URL,
                    method: "GET",
                    data: {
                        key: t,
                        code: e.code
                    },
                    success: function success(e) {
                        if (e && 200 === e.statusCode && e.data && e.data.data) {
                            e = e.data.data;
                            i.setOpenid(e.oid);
                            i.setUnionid(e.uid);
                            return n && n(!0);
                        }
                        n && n();
                    },
                    fail: function fail(e) {
                        a().v("wx request failed...", e);
                        n && n();
                    }
                }) : n && n();
            },
            fail: function fail() {
                n && n();
            }
        });
    };
    return t;
}(function(t) {
    o(e, t);
    function e() {
        var e = null !== t && t.apply(this, arguments) || this;
        e._openid = "";
        e._unionid = "";
        e._useOpenid = !1;
        return e;
    }
    e.prototype.initID = function(t) {
        var n = this;
        n._idType = n._useOpenid ? "openid" : "uuid";
        a().v("id type: ", n._idType);
        u.getStorage(s.UNIONID, function(e) {
            n._unionid = e;
        });
        this._useOpenid ? u.getStorage(s.OPENID, function(e) {
            n._openid = e;
            t && t();
        }) : t && t();
    };
    e.prototype.setUseOpenid = function(e) {
        this._useOpenid = e;
    };
    e.prototype.setOpenid = function(e) {
        if (!this._openid && e) {
            this._openid = e;
            u.setStorage(s.OPENID, e);
        }
    };
    e.prototype.setUnionid = function(e) {
        if (!this._unionid && e) {
            this._unionid = e;
            u.setStorage(s.UNIONID, e);
        }
    };
    e.prototype.getIdTracking = function() {
        var e = t.prototype.getIdTracking.call(this);
        this._openid && (e.openid = this._openid);
        this._unionid && (e.unionid = this._unionid);
        this._userid && (e.userid = this._userid);
        return e;
    };
    e.prototype.getId = function() {
        return this._useOpenid ? this._openid : this._uuid;
    };
    return e;
}(function() {
    function e() {
        this._uuid = "";
        this._userid = "";
        this._provider = "";
        this._idType = "";
    }
    e.prototype.createUUID = function() {
        return p.getRandomStr(10) + Date.now() + p.getRandomStr(7) + s.UUID_SUFFIX;
    };
    e.prototype.initUUID = function(t) {
        var n = this;
        u.getStorage(s.UUID, function(e) {
            if (e) n._uuid = e; else {
                n._uuid = n.createUUID();
                u.setStorage(s.UUID, n._uuid);
            }
            t && t(e);
        });
    };
    e.prototype.initUserid = function() {
        var t = this;
        u.getStorage(s.USERID, function(e) {
            if (!t._userid && e) {
                t._userid = e;
                a().v("userId is ", e);
            }
        });
        u.getStorage(s.PROVIDER, function(e) {
            if (!t._provider && e) {
                t._provider = e;
                a().v("provider is ", e);
            }
        });
    };
    e.prototype.init = function(e) {
        var t = this;
        t.initUUID(function() {
            t.initUserid();
            t.initID(e);
        });
    };
    e.prototype.setUserid = function(e, t) {
        if (!this._userid && e) {
            this._userid = e;
            this._provider = t;
            u.setStorage(s.USERID, e);
            u.setStorage(s.PROVIDER, t);
        }
    };
    e.prototype.getUserId = function() {
        return this._userid;
    };
    e.prototype.getProvider = function() {
        return this._provider;
    };
    e.prototype.getIdType = function() {
        return this._idType;
    };
    e.prototype.getIdTracking = function() {
        var e = {};
        this._uuid && (e.uuid = this._uuid);
        this._userid && (e.userid = this._userid);
        return e;
    };
    return e;
}())), d = function d() {
    return c = c || new l();
}, h = (f = c = null, function() {
    return f = f || new g();
});

function g() {
    var n = {};
    this.useOpenid = function() {
        return !!n.useOpenid;
    };
    this.useSwanid = function() {
        return !!n.useSwanid;
    };
    this.autoGetOpenid = function() {
        return !!n.autoGetOpenid;
    };
    this.appKey = function() {
        return n.appKey;
    };
    this.uploadUserInfo = function() {
        return n.uploadUserInfo;
    };
    this.enableVerify = function() {
        return n.enableVerify;
    };
    this.set = function(e) {
        n = e;
    };
    this.get = function() {
        return n;
    };
    this.setItem = function(e, t) {
        n[e] = t;
    };
    this.getItem = function(e) {
        return n[e];
    };
}

var v = {
    FETCH_URL: "https://ucc.umeng.com/v1/mini/fetch",
    ABLOG_URL: "https://pslog.umeng.com/mini_ablog",
    SDK_VERSION: "2.4.11",
    MOBILE_NETWORK_NONE: "none",
    MOBILE_NETWORK_2G: "2g",
    MOBILE_NETWORK_3G: "3g",
    MOBILE_NETWORK_4G: "4g",
    MOBILE_NETWORK_5G: "5g",
    MOBILE_NETWORK_WIFI: "wifi",
    IMPRINT: "imprint"
}, y = {}, _ = Array.isArray;

y.isArray = _ || function(e) {
    return "[object Array]" === toString.call(e);
};

y.isObject = function(e) {
    return e === Object(e) && !y.isArray(e);
};

y.isEmptyObject = function(e) {
    if (y.isObject(e)) {
        for (var t in e) {
            if (hasOwnProperty.call(e, t)) return !1;
        }
        return !0;
    }
    return !1;
};

y.isUndefined = function(e) {
    return void 0 === e;
};

y.isString = function(e) {
    return "[object String]" === toString.call(e);
};

y.isDate = function(e) {
    return "[object Date]" === toString.call(e);
};

y.isNumber = function(e) {
    return "[object Number]" === toString.call(e);
};

y.each = function(e, t, n) {
    if (null != e) {
        var i = {}, r = Array.prototype.forEach;
        if (r && e.forEach === r) e.forEach(t, n); else if (e.length === +e.length) {
            for (var o = 0, s = e.length; o < s; o++) {
                if (o in e && t.call(n, e[o], o, e) === i) return;
            }
        } else for (var a in e) {
            if (hasOwnProperty.call(e, a) && t.call(n, e[a], a, e) === i) return;
        }
    }
};

y.buildQuery = function(e, t) {
    var n, i, r = [];
    void 0 === t && (t = "&");
    y.each(e, function(e, t) {
        n = encodeURIComponent(e.toString());
        i = encodeURIComponent(t);
        r[r.length] = i + "=" + n;
    });
    return r.join(t);
};

y.JSONDecode = function(e) {
    if (e) {
        try {
            return JSON.parse(e);
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            console.error("JSONDecode error", e);
        }
        return null;
    }
};

y.JSONEncode = function(e) {
    try {
        return JSON.stringify(e);
    } catch (e) {
        e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
        console.error("JSONEncode error", e);
    }
};

var m, S, I, E, O = {
    stringify: function stringify(e) {
        if (e) try {
            return JSON.stringify(e);
        } catch (e) {}
        return "";
    },
    parse: function parse(e) {
        if (e) try {
            return JSON.parse(e);
        } catch (e) {}
        return null;
    },
    parseToArray: function parseToArray(e) {
        if (e) try {
            return JSON.parse(e);
        } catch (e) {}
        return [];
    }
}, A = (S = "", I = m = null, E = !1, function() {
    return m = m || new N();
});

function N() {
    this.load = function(t) {
        if (I) {
            u.removeStorage(S);
            t();
        } else {
            S = "um_cache_" + h().appKey();
            u.getStorage(S, function(e) {
                I = O.parse(e) || {};
                E = !0;
                u.removeStorage(S);
                t();
            });
        }
    };
    this.save = function() {
        I && u.setStorage(S, O.stringify(I));
    };
    this.set = function(e, t) {
        I && (I[e] = t);
    };
    this.get = function(e) {
        return (I || {})[e];
    };
    this.remove = function(e) {
        I && I[e] && delete I[e];
    };
    this.getAll = function() {
        return I;
    };
    this.clear = function() {
        I = null;
    };
    this.has = function(e) {
        return !!this.get(e);
    };
    this.isLoaded = function() {
        return E;
    };
}

function w(e) {
    if (e.length < 2) return (t = e.charCodeAt(0)) < 128 ? e : t < 2048 ? P(192 | t >>> 6) + P(128 | 63 & t) : P(224 | t >>> 12 & 15) + P(128 | t >>> 6 & 63) + P(128 | 63 & t);
    var t = 65536 + 1024 * (e.charCodeAt(0) - 55296) + (e.charCodeAt(1) - 56320);
    return P(240 | t >>> 18 & 7) + P(128 | t >>> 12 & 63) + P(128 | t >>> 6 & 63) + P(128 | 63 & t);
}

function T(e) {
    var t = [ 0, 2, 1 ][e.length % 3], e = e.charCodeAt(0) << 16 | (1 < e.length ? e.charCodeAt(1) : 0) << 8 | (2 < e.length ? e.charCodeAt(2) : 0);
    return [ D.charAt(e >>> 18), D.charAt(e >>> 12 & 63), 2 <= t ? "=" : D.charAt(e >>> 6 & 63), 1 <= t ? "=" : D.charAt(63 & e) ].join("");
}

function k(e) {
    return e.replace(x, w).replace(/[\s\S]{1,3}/g, T);
}

function R(e) {
    switch (e.length) {
      case 4:
        var t = ((7 & e.charCodeAt(0)) << 18 | (63 & e.charCodeAt(1)) << 12 | (63 & e.charCodeAt(2)) << 6 | 63 & e.charCodeAt(3)) - 65536;
        return P(55296 + (t >>> 10)) + P(56320 + (1023 & t));

      case 3:
        return P((15 & e.charCodeAt(0)) << 12 | (63 & e.charCodeAt(1)) << 6 | 63 & e.charCodeAt(2));

      default:
        return P((31 & e.charCodeAt(0)) << 6 | 63 & e.charCodeAt(1));
    }
}

function U(e) {
    var t = e.length, n = t % 4, e = (0 < t ? L[e.charAt(0)] << 18 : 0) | (1 < t ? L[e.charAt(1)] << 12 : 0) | (2 < t ? L[e.charAt(2)] << 6 : 0) | (3 < t ? L[e.charAt(3)] : 0);
    (e = [ P(e >>> 16), P(e >>> 8 & 255), P(255 & e) ]).length -= [ 0, 0, 2, 1 ][n];
    return e.join("");
}

function b(e) {
    return e.replace(/[\s\S]{1,4}/g, U).replace(M, R);
}

var D = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", L = function(e) {
    for (var t = {}, n = 0, i = e.length; n < i; n++) {
        t[e.charAt(n)] = n;
    }
    return t;
}(D), P = String.fromCharCode, x = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g, M = new RegExp([ "[À-ß][-¿]", "[à-ï][-¿]{2}", "[ð-÷][-¿]{3}" ].join("|"), "g"), C = {
    encode: function encode(e, t) {
        return t ? k(String(e)).replace(/[+\/]/g, function(e) {
            return "+" == e ? "-" : "_";
        }).replace(/=/g, "") : k(String(e));
    },
    decode: function decode(e) {
        return b(String(e).replace(/[-_]/g, function(e) {
            return "-" == e ? "+" : "/";
        }).replace(/[^A-Za-z0-9\+\/]/g, ""));
    }
};

var V = new function() {
    var t = "", n = this;
    this.set = function(e) {
        t = e;
    };
    this.get = function() {
        return t;
    };
    this.getImpObj = function() {
        return O.parse(C.decode(t));
    };
    this.getItem = function(e) {
        var t = n.getImpObj();
        return t && t[e] || "";
    };
    this.load = function() {
        t = A().get(s.IMPRINT);
    };
    this.save = function() {
        t && A().set(s.IMPRINT, t);
    };
}(), j = Object.create(null);

function K(n) {
    a().v("开始构建 fetch body");
    u.getSystemInfo(function(t) {
        u.getNetworkInfo(function(e) {
            e = (e = (e = e || {}).networkType) === v.MOBILE_NETWORK_NONE ? "unknown" : e.toUpperCase();
            j.access = e;
            !function(e, t) {
                var n = e.brand || "";
                j.deviceType = "Phone";
                j.sdkVersion = v.SDK_VERSION;
                j.appkey = h().appKey();
                j.sdkType = u.getSdkType();
                j.umid = d().getId();
                if (e) {
                    j.language = e.language || "";
                    j.os = e.OS;
                    j.osVersion = e.OSVersion;
                    j.deviceName = e.deviceName;
                    j.platformVersion = e.platformVersion;
                    j.platformSdkVersion = e.platformSDKVersion;
                    j.deviceBrand = n;
                    e = e.resolution.split("*");
                    if (y.isArray(e)) {
                        j.resolutionHeight = Number(e[0]);
                        j.resolutionWidth = Number(e[1]);
                    }
                }
                !function(e) {
                    if (e) {
                        j.installTime = e.install_datetime && Date.parse(e.install_datetime);
                        j.scene = e.install_scene;
                        j.channel = e.install_channel;
                        j.campaign = e.install_campaign;
                    }
                }(V.getImpObj());
                t && t(j);
            }(t, n);
        });
    });
}

function G() {
    this.listeners = {};
    this.maxListener = 2;
}

G.prototype.addListener = G.prototype.on = function(e, t) {
    var n = this.listeners;
    n[e] && n[e].length >= this.maxListener ? console.error("监听器的最大数量是%d,您已超出限制", this.maxListener) : n[e] instanceof Array ? -1 === n[e].indexOf(t) && n[e].push(t) : n[e] = [].concat(t);
};

G.prototype.emit = function(e) {
    var t = Array.prototype.slice.call(arguments);
    t.shift();
    var n = this.listeners;
    n[e] instanceof Array && n[e].forEach(function(e) {
        e.apply(null, t);
    });
};

G.prototype.listeners = function(e) {
    return this.listeners[e];
};

G.prototype.setMaxListeners = function(e) {
    this.maxListener = e;
};

G.prototype.removeListener = function(e, t) {
    var n = this.listeners, t = (n[e] || []).indexOf(t);
    0 <= t && n[e].splice(t, 1);
};

G.prototype.removeAllListener = function(e) {
    this.listeners[e] = [];
};

G.prototype.once = function(n, i) {
    var r = this;
    this.on(n, function e() {
        var t = Array.prototype.slice.call(arguments);
        i.apply(null, t);
        r.removeListener(n, e);
    });
};

var F = new G(), q = 0, H = 1, Y = Object.create(null), W = null, J = !1, B = {
    minFetchIntervalSeconds: 43200
};

function X(e) {
    e && y.each(e, function(e) {
        Y[e.k] = e;
    });
}

function z() {
    var t = this;
    this.STORAGE_NAME = null;
    F.on(q, function(e) {
        a().v("云配初始化开始...");
        t.init(e);
    });
}

z.prototype = {
    setDefaultValues: function setDefaultValues(e) {
        J && y.isObject(e) && y.each(e, function(e, t) {
            Y[t] && Y[t].v || (Y[t] = {
                v: e
            });
        });
    },
    getValue: function getValue(t) {
        a().v("从配置项中读取 value, 当前配置为: ", Y);
        a().v("待读取的 key : ", t);
        try {
            if (!J) return;
            var e = Y[t] || {};
            a().v("读取相应配置ing..., 结果为: ", e);
            if (y.isNumber(e.e) && y.isNumber(e.g)) {
                a().v("读取到相应配置, 开始数据上报...");
                !function(e) {
                    var t = {
                        appkey: h().appKey(),
                        sdkType: u.getSdkType(),
                        expId: e && e.e,
                        groupId: e && e.g,
                        clientTs: Date.now(),
                        key: e && e.k,
                        value: e && e.v,
                        umid: d().getId()
                    };
                    try {
                        u.request({
                            url: v.ABLOG_URL,
                            method: "POST",
                            data: [ t ],
                            success: function success(e) {
                                e && 200 === e.statusCode ? a().v("上传数据成功", t) : a().w("ablog 请求成功, 返回结果异常 ", e);
                            },
                            fail: function fail(e) {
                                a().w("ablog 请求数据错误 ", t, e);
                            }
                        });
                    } catch (e) {
                        e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                        a().w("urequest 调用错误", e);
                    }
                }(e);
            }
            return e.v;
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            a().w("getValue error, key: ", t);
        }
    },
    active: function active(e) {
        try {
            if (!J) return;
            var t, n;
            e && e.params && (t = e.params);
            e && e.callback && (n = e.callback);
            a().v("激活配置项: ", t);
            if (t) {
                a().v("本地已缓存的配置项: ", Y);
                X(t);
                a().v("合并后的配置项: ", Y);
                n && n(Y);
                a().v("active 结束");
            } else {
                a().v("配置项为空!! 读取本地配置...");
                u.getStorage(this.STORAGE_NAME, function(e) {
                    if (e) {
                        X((e = y.JSONDecode(e) || {}).params);
                        a().v("当前本地配置项为: ", Y);
                        n && n(Y);
                        a().v("active 结束");
                    } else a().v("当前本地配置项为空, 退出激活");
                });
            }
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            a().w("SDK active 错误", e);
        }
    },
    init: function init(e) {
        if (e.appKey) {
            W = e.appKey;
            this.STORAGE_NAME = "um_remote_config_{{" + W + "}}";
        }
        if (W) {
            if (J) a().w("SDK 已经初始化, 请避免重复初始化"); else {
                J = !0;
                this.setOptions(e);
                this.active();
            }
        } else a().err("请检查您的小程序 appKey, appKey 不能为空");
    },
    setOptions: function setOptions(e) {
        if (y.isObject(e)) {
            e = e.minFetchIntervalSeconds;
            y.isNumber(e) && (B.minFetchIntervalSeconds = Math.max(e, 5));
        }
    },
    fetch: function fetch(e) {
        if (J && this.STORAGE_NAME) {
            var i, r;
            e && e.active && (i = e.active);
            e && e.callback && (r = e.callback);
            var o = this;
            u.getStorage(this.STORAGE_NAME, function(e) {
                a().v("开始读缓存 data is ", e);
                if ((e = y.JSONDecode(e) || {}).params && e.ts && Date.now() - e.ts < 1e3 * B.minFetchIntervalSeconds) {
                    a().v("缓存数据存在, 并且本次触发时间距离上次fetch触发时间未超过 fetch 时间间隔, 无需 fetch");
                    r && r(e.params);
                } else K(function(t) {
                    a().v("缓存数据不存在, 构建 fetch body :", t);
                    try {
                        u.request({
                            url: v.FETCH_URL,
                            method: "POST",
                            data: t,
                            success: function success(e) {
                                if (e && 200 === e.statusCode && e.data && e.data.cc) {
                                    a().v("fetch 请求成功, 响应数据: ", e.data);
                                    var t = Object.create(null);
                                    y.each(e.data.cc, function(e) {
                                        t[e.k] = e;
                                    });
                                    var n = {
                                        ts: Date.now(),
                                        params: t
                                    };
                                    a().v("开始缓存 fetch 请求的云配置结果...");
                                    u.setStorage(o.STORAGE_NAME, y.JSONEncode(n), function(e) {
                                        a().v("缓存云配置成功, 缓存数据为: ", n);
                                        a().v("缓存云配置成功, 成功消息为: ", e);
                                        a().v("云配拉取数据是否自动激活: ", i);
                                        if (e && i) {
                                            a().v("激活云配置...");
                                            o.active({
                                                params: t,
                                                callback: r
                                            });
                                        }
                                    });
                                } else {
                                    a().w("fetch 请求成功,返回结果异常 ", e.data);
                                    r && r();
                                }
                            },
                            fail: function fail(e) {
                                a().w("fetch请求数据错误 ", t, e);
                                r && r();
                            }
                        });
                    } catch (e) {
                        e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                        a().w("urequest调用错误", e);
                    }
                });
            });
        }
    }
};

var Q, Z = function Z() {
    return Q = Q || new $();
};

function $() {
    var t = !1, n = null, i = [];
    this.addPageStart = function(e) {
        if (e && !t) {
            n = {
                ts: Date.now(),
                path: e,
                page_name: e
            };
            t = !0;
        }
    };
    this.addPageEnd = function(e) {
        if (t && e && n && e === n.page_name) {
            e = Date.now() - n.ts;
            n.duration = Math.abs(e);
            i.push(n);
            n = null;
            t = !1;
        }
    };
    this.get = function() {
        return i;
    };
    this.getCurrentPage = function() {
        return n;
    };
    this.clear = function() {
        i.length = 0;
    };
}

var ee = {};

function te() {
    return function(e) {
        var t, n = [];
        for (t in e) {
            "_um_ssrc" !== t && "_um_sts" !== t && n.push(t + "=" + e[t]);
        }
        return n.join("&");
    }(ee);
}

var ne, ie, re, oe = (ie = [], function() {
    return ne = ne || new se();
});

function se() {
    return {
        add: function add(e, t) {
            a().v("share origin: %o", e);
            var n = {
                title: e && e.title,
                path: e && e.path && e.path.split("?")[0],
                _um_sts: Date.now()
            };
            n.path && 1 < n.path.length && p.startsWith(n.path, "/") && (n.path = p.trimStart(n.path, "/"));
            var i = e.path || "", r = d().getId();
            if (r) {
                var o = re.split(","), s = (o = o.filter(function(e) {
                    return 0 < e.length;
                })).indexOf(r);
                0 <= s && (o = o.slice(0, s));
                o.length < 3 && o.push(r);
                r = o.join(",");
                -1 !== i.indexOf("?") ? i += "&_um_ssrc=" + r : i += "?_um_ssrc=" + r;
                o = Date.now();
                i += "&_um_sts=" + o;
                if (t) {
                    t = te(), t = t ? t + "&_um_ssrc=" + r + "&_um_sts=" + o : "_um_ssrc=" + r + "&_um_sts=" + o;
                    e.query = e.query ? e.query + "&_um_ssrc=" + r + "&_um_sts=" + o : t;
                } else e.path = i;
                n._um_ssrc = r;
                n._um_sts = o;
            }
            ie.push(n);
            a().v("share: %o", e);
            return e;
        },
        setShareSource: function setShareSource(e) {
            re = e;
        },
        clear: function clear() {
            ie.length = 0;
        },
        get: function get() {
            return ie;
        }
    };
}

var ae, ue, ce, fe, pe = "ekvs", le = 1e4, de = (ce = [], function() {
    return ae = ae || {
        addEvent: function addEvent(e) {
            if (ue) {
                ce.unshift(e);
                if (1 < ce.length) {
                    he();
                    ce.length = 0;
                }
            } else {
                a().w("session id is null: ", ue);
                fe.unshift(e);
            }
        },
        setSessionId: function setSessionId(e) {
            ue = e;
            a().v("setSessionId: ", ue);
            if (Array.isArray(fe) && fe.length && ue) {
                for (var t = 0; t < fe.length; t++) {
                    this.addEvent(fe[t]);
                }
                fe.length = 0;
            }
        },
        getEkvs: function getEkvs() {
            var e = A().get(pe);
            ce && ce.length && (e = ge(e, ce));
            return e;
        },
        clear: function clear() {
            A().remove(pe);
            ce.length = 0;
        }
    };
});

function he() {
    if (ce.length) {
        var e = A().get(pe);
        if (function(e) {
            var t, n = 0;
            for (t in e) {
                Array.isArray(e[t]) && (n += e[t].length);
            }
            return n;
        }(e) + ce.length <= le) {
            e = ge(e, ce);
            A().set(pe, e);
        }
    }
}

function ge(e, t) {
    var n = (e = e || {})[ue];
    Array.isArray(n) && n.length ? e[ue] = n.concat(t) : e[ue] = [].concat(t);
    return e;
}

var ve, ye = "2g", _e = "3g", me = "4g", Se = {
    HALF_SESSION: "half_session",
    CLOSE_SESSION: "close_session",
    EKV: "ekv",
    ENTER_PAGE: "enter_page",
    LEAVE_PAGE: "leave_page"
}, Ie = [ "access", "access_subtype" ], Ee = {
    instance: function instance() {
        return ve = ve || Oe();
    }
};

function Oe() {
    var e = !1, o = {};
    function t(n) {
        var e = A().get(s.IMPRINT);
        e && (o.imprint = e);
        o.device_type = "Phone";
        o.sdk_version = s.IMPL_VERSION;
        o.appkey = h().appKey();
        u.getDeviceInfo(function(e) {
            o.device_info = e || "";
        });
        e = u.getAppInfoSync();
        o.appid = e.appId;
        o.app_env = e.appEnv;
        o.app_version = e.appVersion;
        u.getSystemInfo(function(t) {
            u.getNetworkInfo(function(e) {
                e = function(e, t) {
                    var n = {}, i = (t = t || {}).networkType;
                    "none" === i && (i = "unknown");
                    var r = e.model || "", o = e.platform || "", s = e.brand || "", t = s.toLowerCase();
                    n.sdk_type = u.getSdkType();
                    n.platform = u.getPlatform();
                    n.platform_sdk_version = e.platformSDKVersion;
                    n.platform_version = e.platformVersion;
                    n.resolution = e.resolution;
                    n.pixel_ratio = e.pixelRatio;
                    n.os = o;
                    n.font_size_setting = e.fontSizeSetting;
                    n.device_model = r;
                    n.device_brand = s;
                    n.device_manufacturer = t;
                    n.device_manuid = r;
                    n.device_name = r;
                    n.os_version = e.OSVersion;
                    n.language = e.language;
                    switch (i = i ? i.toLowerCase() : "") {
                      case me:
                        n.access_subtype = "LTE";
                        n.access = "4G";
                        break;

                      case _e:
                        n.access_subtype = "CDMA";
                        n.access = "3G";
                        break;

                      case ye:
                        n.access_subtype = "GRPS";
                        n.access = "2G";
                        break;

                      default:
                        n.access = i;
                        delete n.access_subtype;
                    }
                    return n;
                }(t, e);
                p.assign(o, e);
                !function(e) {
                    var t = [];
                    if (e) {
                        t.push({
                            name: "系统名",
                            value: o.platform
                        });
                        t.push({
                            name: "支付宝版本号",
                            value: o.platform_version
                        });
                    }
                    t.push({
                        name: "设备型号",
                        value: o.device_model
                    });
                    t.push({
                        name: "设备生产商",
                        value: o.device_brand
                    });
                    t.push({
                        name: "os版本号",
                        value: o.os_version
                    });
                    t.push({
                        name: "网络类型",
                        value: o.access
                    });
                    t.push({
                        name: "运营商",
                        value: o.access_subtype
                    });
                    t.push({
                        name: "分辨率",
                        value: o.resolution
                    });
                    t.push({
                        name: "pixelRatio",
                        value: o.pixel_ratio
                    });
                    for (var n = "", i = 0; i < t.length; i++) {
                        var r = t[i];
                        n += r.name + ": " + r.value + "; ";
                    }
                    a().v("调试辅助信息: ", n);
                }();
                n && n();
            });
        });
    }
    return {
        init: function init() {
            t(function() {
                e = !0;
            });
        },
        isLoaded: function isLoaded() {
            return e;
        },
        get: function get() {
            return o;
        },
        getRealtimeFields: function getRealtimeFields() {
            var t = {};
            Ie.forEach(function(e) {
                t[e] = o[e];
            });
            return t;
        },
        setIdTracking: function setIdTracking(e) {
            this.setItem("id_tracking", e);
        },
        setIdType: function setIdType(e) {
            this.setItem("id_type", e);
        },
        setAppVersion: function setAppVersion(e) {
            this.setItem("app_version", e);
        },
        setSuperProperty: function setSuperProperty(e) {
            o.sp || (o.sp = {});
            o.sp.isv = e;
        },
        getSuperProperty: function getSuperProperty() {
            return o && o.sp ? o.sp.isv : "";
        },
        setItem: function setItem(e, t) {
            o[e] = t;
        },
        getItem: function getItem(e) {
            return o[e];
        }
    };
}

var Ae, Ne, we, Te = function Te() {
    return Ae = Ae || ke();
};

function ke() {
    return {
        resume: function resume(e) {
            var t = !1;
            we = we || A().get(s.CURRENT_SESSION);
            var n = new Date();
            Ne = n.getTime();
            if (!we || !we.end_time || Ne - we.end_time > s.SESSION_INTERVAL) {
                t = !0;
                !function(e) {
                    try {
                        var t = (we || {}).options || {}, n = p.assign({}, function(e) {
                            var t, n = {};
                            for (t in e) {
                                0 === t.indexOf("_um_") && (n[t] = e[t]);
                            }
                            a().v("query: ", e);
                            a().v("_um_params: ", n);
                            return n;
                        }(e.query));
                        n.path = e.path || t.path;
                        n.scene = e.scene ? u.getPlatform() + "_" + e.scene : t.scene;
                        t = e.referrerInfo;
                        t && (n.referrerAppId = t.appId);
                        a().v("session options: ", n);
                        t = n[s.UM_SSRC];
                        t && oe().setShareSource(t);
                        t = Date.now();
                        we = {
                            id: p.getRandomStr(10) + t,
                            start_time: t,
                            options: n
                        };
                    } catch (e) {
                        e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                        a().e("生成新session失败: ", e);
                    }
                }(e);
                a().v("开始新的session(%s): ", we.id, we);
            } else a().v("延续上一次session(%s): %s ", we.id, n.toLocaleTimeString(), we);
            return t;
        },
        pause: function pause() {
            !function() {
                if (we) {
                    var e = new Date();
                    we.end_time = e.getTime();
                    "number" != typeof we.duration && (we.duration = 0);
                    we.duration = we.end_time - Ne;
                    A().set(s.CURRENT_SESSION, we);
                    a().v("退出会话(%s): %s ", we.id, e.toLocaleTimeString(), we);
                }
            }();
        },
        getCurrentSessionId: function getCurrentSessionId() {
            return (we || {}).id;
        },
        getCurrentSession: function getCurrentSession() {
            return we;
        },
        cloneCurrentSession: function cloneCurrentSession() {
            return p.clone(we);
        }
    };
}

function Re(e) {
    var t = null;
    switch (e) {
      case Se.HALF_SESSION:
        t = function() {
            var e = null, t = Te().cloneCurrentSession();
            t && (e = {
                header: {
                    st: "1"
                },
                analytics: {
                    sessions: [ t ]
                }
            });
            return e;
        }();
        break;

      case Se.CLOSE_SESSION:
        t = function() {
            var e = null, t = {}, n = Te().cloneCurrentSession();
            if (n) {
                var i = Z().get(), r = oe().get();
                Array.isArray(i) && i.length && (n.pages = p.clone(i));
                Array.isArray(r) && r.length && (n.shares = p.clone(r));
                Z().clear();
                oe().clear();
                t.sessions = [ n ];
            }
            n = de().getEkvs();
            if (n) {
                t.ekvs = p.clone(n);
                de().clear();
            }
            (t.sessions || t.ekvs) && (e = {
                analytics: t
            });
            return e;
        }();
        break;

      case Se.EKV:
        t = function() {
            var e = null, t = de().getEkvs();
            if (t) {
                e = {
                    analytics: {
                        ekvs: p.clone(t)
                    }
                };
                de().clear();
            }
            return e;
        }();
    }
    return t;
}

var Ue = {
    sessions: "sn",
    ekvs: "e",
    active_user: "active_user"
}, be = {
    sdk_type: "sdt",
    access: "ac",
    access_subtype: "acs",
    device_model: "dm",
    language: "lang",
    device_type: "dt",
    device_manufacturer: "dmf",
    device_name: "dn",
    platform_version: "pv",
    id_type: "it",
    font_size_setting: "fss",
    os_version: "ov",
    device_manuid: "did",
    platform_sdk_version: "psv",
    device_brand: "db",
    appkey: "ak",
    _id: "id",
    id_tracking: "itr",
    imprint: "imp",
    sdk_version: "sv",
    resolution: "rl",
    testToken: "ttn"
}, De = {
    uuid: "ud",
    unionid: "und",
    openid: "od",
    anonymousid: "nd",
    alipay_id: "ad",
    device_id: "dd",
    userid: "puid"
};

function Le(e) {
    return {
        h: function(e, t) {
            var n = Pe(e, t);
            e && e.id_tracking && (n[t.id_tracking || "id_tracking"] = Pe(e.id_tracking, De));
            return n;
        }(e.header, be),
        a: function(e, t) {
            var n = {};
            if (e) for (var i in e) {
                e[i] && (n[t[i]] = e[i]);
            }
            return n;
        }(e.analytics, Ue)
    };
}

function Pe(e, t) {
    var n, i = {};
    for (n in e) {
        t[n] ? i[t[n]] = e[n] : i[n] = e[n];
    }
    return i;
}

var xe = re = "";

function Me(n, i, r, e) {
    Ee.instance().setIdType(d().getIdType());
    Ee.instance().setIdTracking(d().getIdTracking());
    var t = d().getUserId();
    t && n.analytics && (n.analytics.active_user = {
        puid: t,
        provider: d().getProvider()
    });
    t = p.clone(Ee.instance().get());
    n.header = p.assign(t, n.header, {
        ts: Date.now(),
        testToken: xe,
        traceId: p.getRandomStr(10) + Date.now() + p.getRandomStr(9)
    });
    var t = Le(n), o = O.stringify(t), t = {
        url: s.LOG_URL,
        method: "POST",
        data: C.encode(o),
        success: function success(e) {
            var t = e.code || e.status || e.statusCode;
            if (200 === t || 413 === t) {
                a().i("数据发送成功: ", n, o);
                !function(e) {
                    if (e) {
                        Ee.instance().setItem(s.IMPRINT, e);
                        V.set(e);
                        V.save();
                        a().v("imprint: ", V.getImpObj());
                        V.getItem("ttn_invalid") && (xe = "");
                    }
                }((e.data || {}).imprint);
                "function" == typeof i && i(e);
            } else {
                a().w("数据发送失败: ", o);
                "function" == typeof r && r();
            }
        },
        fail: function fail(e) {
            a().w("超时: ", o);
            "function" == typeof r && r();
        },
        complete: function complete() {
            "function" == typeof e && e();
        }
    };
    u.request(p.assign(t, {
        header: {
            "Content-Type": t = u.getSdkType() + "/json",
            "Msg-Type": t
        }
    }));
}

function Ce(e) {
    var t = e, n = [];
    this.enqueue = function(e) {
        "number" == typeof t && this.size() >= t && this.dequeue();
        n.push(e);
    };
    this.dequeue = function() {
        return n.shift();
    };
    this.front = function() {
        return n[0];
    };
    this.isEmpty = function() {
        return 0 === n.length;
    };
    this.clear = function() {
        n.length = 0;
    };
    this.size = function() {
        return n.length;
    };
    this.items = function() {
        return n;
    };
    this.print = function() {
        console.log(n.toString());
    };
}

var Ve, je, Ke, Ge, Fe = (Ve = we = Ne = Ae = ve = ne = Q = null, je = !(fe = []), 
Ke = [], Ge = new Ce(50), function() {
    return Ve = Ve || new Ye();
});

function qe(t) {
    var e = Ge.front();
    if (e) Me(e, function() {
        Ge.dequeue();
        qe(t);
    }, function() {
        var e = Ge.dequeue();
        e && !e.noCache && Ke.push(e);
        qe(t);
    }); else {
        !function() {
            Ke.forEach(function(e) {
                Ge.enqueue(e);
            });
            Ke.length = 0;
        }();
        t();
    }
}

function He(e) {
    if (d().getId()) {
        if (je) a().i("队列正在发送中"); else {
            je = !0;
            qe(function() {
                je = !1;
                "function" == typeof e && e();
            });
        }
    } else {
        a().i("获取id标识失败，暂缓发送");
        "function" == typeof e && e();
    }
}

function Ye() {
    this.send = function(e, t, n) {
        e ? this.add(e, t, function() {
            He(n);
        }) : He(n);
    };
    this.add = function(e, t, n) {
        !function e(t, n, i) {
            if (Ee.instance().isLoaded()) {
                n = n || {};
                var r = Re(t);
                if (r) {
                    var o = Ee.instance().getRealtimeFields();
                    r.header = p.assign({}, r.header, o);
                    r.noCache = n.noCache;
                    Ge.enqueue(r);
                }
                "function" == typeof i && i();
            } else setTimeout(function() {
                e(t, n, i);
            }, 100);
        }(e, t, n);
    };
    this.load = function() {
        var e = A().get(s.REQUESTS);
        e && e.length && e.forEach(function(e) {
            Ge.enqueue(e);
        });
        A().remove(s.REQUESTS);
    };
    this.save = function() {
        A().set(s.REQUESTS, p.clone(Ge.items()));
        Ge.clear();
    };
}

var We, Je = (We = null, function() {
    return We = We || new Be();
});

function Be() {
    this.update = function() {
        u.getUserInfo(function(t) {
            if (t) {
                var e = A().get(s.USER_INFO);
                e && p.deepEqual(t, e) || function(t, n) {
                    var e = h().appKey(), i = u.getSdkType(), r = d().getId(), o = d().getIdType();
                    if (!(e && i && r && o)) return;
                    o = {
                        ak: h().appKey(),
                        sdt: u.getSdkType(),
                        uin: t.nickName,
                        uia: t.avatar,
                        uig: t.gender,
                        uit: t.country,
                        uip: t.province,
                        uic: t.city,
                        uil: t.language,
                        id: d().getId(),
                        it: d().getIdType()
                    }, o = JSON.stringify(o);
                    o = C.encode(o);
                    u.request({
                        url: s.USERINFO_URL,
                        method: "POST",
                        header: {
                            "content-type": "application/x-www-form-urlencoded"
                        },
                        data: "ui=" + o,
                        success: function success(e) {
                            a().v("用户信息上传成功: ", t);
                            n && n(e && e.data && 200 === e.data.code);
                        },
                        fail: function fail() {
                            a().e("用户信息上传失败: ", t);
                            n && n(!1);
                        }
                    });
                }(t, function(e) {
                    e && A().set(s.USER_INFO, t);
                });
            }
        });
    };
}

function Xe(e, t) {
    this.id = e;
    this.ts = Date.now();
    var n = _typeof2(t);
    if ("string" == n && t) this[e] = t; else if ("object" == n) for (var i in t) {
        !{}.hasOwnProperty.call(t, i) || (this[i] = t[i]);
    }
}

function ze() {
    var r = !1, n = !1, o = 0;
    this.init = function(e) {
        a().v("sdk version: " + s.IMPL_VERSION);
        r ? a().v("Lib重复实例化") : A().load(function() {
            a().v("cache初始化成功: ", A().getAll());
            !function() {
                d().setUseOpenid && d().setUseOpenid(h().useOpenid());
                d().init(function() {
                    Ee.instance().init();
                    a().v("Header初始化成功");
                });
            }();
            r = !0;
            "function" == typeof e && e();
            a().tip("SDK集成成功");
        });
    };
    this.resume = function(e) {
        if (r && !n) {
            a().v("showOptions: ", e);
            var t;
            n = !0;
            h().enableVerify() && e && e.query && (t = e.query._ttn, xe = t || xe);
            this._resume(e);
        }
    };
    this._resume = function(e) {
        Fe().load();
        var t = Te().resume(e), e = Te().getCurrentSessionId();
        de().setSessionId(e);
        t && Fe().add(Se.HALF_SESSION, {}, function() {
            d().setUseOpenid && d().setUseOpenid(h().useOpenid());
            if (h().useOpenid() && h().autoGetOpenid() && !d().getId()) {
                a().v("get id async");
                !function t(n, i) {
                    if (d().getId() || n <= 0) return;
                    d().getOpenIdAsync(h().appKey(), function(e) {
                        if (e) {
                            a().v("获取id成功");
                            Fe().send();
                        } else {
                            a().v("获取openid失败,启动重试,剩余可用次数", n - 1);
                            setTimeout(function() {
                                t(n - 1, i);
                            }, i);
                        }
                    });
                }(10, 3e3);
            } else {
                a().v("session auto send");
                Fe().send();
            }
        });
    };
    this.pause = function(e) {
        if (r) {
            n = !1;
            o = 0;
            Te().pause();
            h().uploadUserInfo() && Je().update();
            Fe().send(Se.CLOSE_SESSION, {}, function() {
                Fe().save();
                A().save();
                a().v("cache save success");
                "function" == typeof e && e();
            });
        }
    };
    this.setOpenid = function(e) {
        a().v("setOpenId: %s", e);
        d().setOpenid(e);
        Fe().send();
    };
    this.setUnionid = function(e) {
        a().v("setUnionid: %s", e);
        d().setUnionid(e);
    };
    this.setUserid = function(e, t) {
        a().v("setUserid: %s", e, t);
        d().setUserid(e, t);
    };
    this.setAnonymousid = function(e) {
        a().v("setAnonymousId: %s", e);
        d().setAnonymousid(e);
        Fe().send();
    };
    this.setAppVersion = function(e) {
        e && "string" != typeof e ? a().w("setAppVersion方法只接受字符串类型参数") : Ee.instance().setAppVersion(e);
    };
    this.setAlipayUserid = function(e) {
        if (e && "string" != typeof e) a().w("setAlipayUserid方法只接受字符串类型参数"); else {
            a().v("setAlipayUserid: %s", e);
            d().setAlipayUserid(e);
        }
    };
    this.setSuperProperty = function(e) {
        if (e && "string" != typeof e) a().w("超级属性只支持字符串类型"); else {
            var t = this;
            if (Ee.instance().getSuperProperty() !== e) {
                Ee.instance().setSuperProperty(e);
                t.pause(function() {
                    t.resume();
                });
            }
        }
    };
    this.trackEvent = function(e, t) {
        if (r) {
            a().v("event: ", e, t);
            if (function(e, t) {
                if (e && "string" == typeof e) {
                    var n = [ "id", "ts", "du" ], i = {};
                    n.forEach(function(e) {
                        i[e] = 1;
                    });
                    if (i[e]) a().e("eventId不能与以下保留字冲突: " + n.join(",")); else if (e.length > s.MAX_EVENTID_LENGTH) a().e("The maximum length of event id shall not exceed " + s.MAX_EVENTID_LENGTH); else {
                        if (!t || "object" == _typeof2(t) && !Array.isArray(t) || "string" == typeof t) {
                            if ("object" == _typeof2(t)) {
                                var r, o = 0;
                                for (r in t) {
                                    if ({}.hasOwnProperty.call(t, r)) {
                                        if (r.length > s.MAX_PROPERTY_KEY_LENGTH) {
                                            a().e("The maximum length of property key shall not exceed " + s.MAX_PROPERTY_KEY_LENGTH);
                                            return;
                                        }
                                        if (o >= s.MAX_PROPERTY_KEYS_COUNT) {
                                            a().e("The maximum count of properties shall not exceed " + s.MAX_PROPERTY_KEYS_COUNT);
                                            return;
                                        }
                                        if (i[r]) {
                                            a().e("属性中的key不能与以下保留字冲突: " + n.join(","));
                                            return;
                                        }
                                        o += 1;
                                    }
                                }
                            }
                            return 1;
                        }
                        a().e("please check trackEvent properties. properties should be string or object(not include Array)");
                    }
                } else a().e('please check trackEvent id. id should be "string" and not null');
            }(e, t)) {
                var n = new Xe(e, t);
                de().addEvent(n);
                var i = !!xe, e = i ? 0 : s.EVENT_SEND_DEFAULT_INTERVAL, t = Date.now();
                if (n = t, e = e, "number" != typeof o || "number" != typeof e || o <= 0 || e < n - o) {
                    o = t;
                    Fe().send(Se.EKV, {
                        noCache: i
                    }, function() {});
                }
            }
        }
    };
    this.trackShare = function(e) {
        if (r) {
            try {
                if (-1 < u.getSdkType().indexOf("game")) {
                    e = oe().add(e, !0);
                    a().v("shareQuery: ", e);
                } else {
                    e = oe().add(e, !1);
                    a().v("sharePath: ", e.path);
                }
            } catch (e) {
                e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                a().v("shareAppMessage: ", e);
            }
            return e;
        }
    };
    this.trackPageStart = function(e) {
        r && Z().addPageStart(e);
    };
    this.trackPageEnd = function(e) {
        r && Z().addPageEnd(e);
    };
    this.onShareAppMessage = function(e) {
        var t = this;
        u.onShareAppMessage(function() {
            return t.trackShare(e());
        });
    };
    this.shareAppMessage = function(e) {
        this.trackShare(e);
        u.shareAppMessage(e);
    };
}

var Qe = [];

function Ze() {}

Ze.prototype = {
    createMethod: function createMethod(e, t, n) {
        try {
            e[t] = n && n[t] ? function() {
                return n[t].apply(n, arguments);
            } : function() {
                Qe.push([ t, [].slice.call(arguments) ]);
            };
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            a().v("create method errror: ", e);
        }
    },
    installApi: function installApi(e, t) {
        try {
            for (var n = "resume,pause,trackEvent,trackPageStart,trackPageEnd,trackShare,setUserid,setOpenid,setUnionid,onShareAppMessage,shareAppMessage".split(","), i = 0, r = n.length; i < r; i++) {
                this.createMethod(e, n[i], t);
            }
            if (t) for (i = 0, r = Qe.length; i < r; i++) {
                var o = Qe[i];
                try {
                    t[o[0]].apply(t, o[1]);
                } catch (e) {
                    e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                    a().v("impl[v[0]].apply error: ", o[0], e);
                }
            }
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            a().v("install api errror: ", e);
        }
    }
};

var $e = [ "https://umini.shujupie.com", "https://ulogs.umeng.com" ], et = 0;

function tt(t, e) {
    if (t >= $e.length || e) {
        e && function() {
            var e = "https://umini.shujupie.com";
            s.LOG_URL = s.LOG_URL.replace(e, $e[et]);
            s.GET_OPENID_URL = s.GET_OPENID_URL.replace(e, $e[et]);
            s.USERINFO_URL = s.USERINFO_URL.replace(e, $e[et]);
        }();
        e && a().v("命中可用服务", $e[et]);
        e || a().tip_w("未命中可用服务");
    } else u.request({
        url: $e[t] + "/uminiprogram_logs/ckdh",
        success: function success(e) {
            200 === (e.code || e.status || e.statusCode) && e.data && 200 === e.data.code ? tt((et = t) + 1, !0) : tt(t + 1, !1);
        },
        fail: function fail() {
            tt(t + 1, !1);
        }
    });
}

({
    init: function init(e) {
        setTimeout(function() {
            tt(0, !1);
        }, e);
    }
}).init(3e3);

var nt = new Ze(), it = {
    _inited: !1,
    init: function init(e) {
        if (this._inited) a().v("已经实例过，请避免重复初始化"); else if (e) {
            if (e.appKey) {
                "boolean" != typeof e.useOpenid && (e.useOpenid = !0);
                h().set(e);
                a().setDebug(e.debug);
                this._inited = !0;
                var t = this;
                F.emit(q, e);
                try {
                    var n = new ze();
                    a().v("成功创建Lib对象");
                    n.init(function() {
                        a().v("Lib对象初始化成功");
                        nt.installApi(t, n);
                        a().v("安装Lib接口成功");
                        F.emit(H, e);
                    });
                } catch (e) {
                    e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                    a().w("创建Lib对象异常: " + e);
                }
            } else a().err("请确保传入正确的appkey");
        } else a().err("请正确设置相关信息！");
    }
};

try {
    nt.installApi(it, null);
} catch (e) {
    e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
    a().w("uma赋值异常: ", e);
}

wx.onShow(function(e) {
    a().v("game onShow: ", e);
    t = e.query, ee = t;
    var t;
    it.resume(e, !0);
});

wx.onHide(function() {
    a().v("game onHide");
    it.pause();
});

var rt = it.init;

it.init = function(e) {
    if (e && e.useOpenid) {
        a().tip_w("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        a().tip_w("您选择了使用openid进行统计，请确保使用setOpenid回传openid或通过设置autoGetOpenid为true，并在友盟后台设置secret由友盟帮您获取");
        a().tip_w("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }
    rt.call(it, e);
};

_ = new z();

!function(e, t, n) {
    if ("object" == _typeof2(e)) {
        if ("string" == typeof t && t.length) e[t] = n; else for (var i in n) {
            if ({}.hasOwnProperty.call(n, i)) {
                if (e[i]) {
                    a().v("方法已定义，无法注入此插件方法: ", i);
                    return;
                }
                n[i] && (e[i] = function() {
                    n[i](arguments);
                });
            }
        }
    } else a().v("插件安装失败，宿主对象不能为空");
}(it, "rc", _);

wx.uma = it;

module.exports = it;